package server

import (
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	log "github.com/sirupsen/logrus"
	"io/ioutil"
	"reflect"
	"strconv"
	"strings"
	"time"
)

var bot *tgbotapi.BotAPI
var textShowOrders = "üõí –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã üõí"
var textDownloadAct = "üìÑ –°–∫–∞—á–∞—Ç—å –∞–∫—Ç –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üìÑ"
var menuKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton(textShowOrders),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton(textDownloadAct),
	),
)
var orderControlKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå","confirmOrderCancellation"),
	),
)
var confirmKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑","doOrderCancellation"),
		tgbotapi.NewInlineKeyboardButtonData("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑","undoOrderCancellation"),
	),
)

// runBot –∑–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
func runBot() {
	var err error
	bot, err = tgbotapi.NewBotAPI(cfg.Bot.ApiToken)
	if err != nil {
		log.Panic("Can't connect to bot, shutting down!")
	}
	log.WithFields(log.Fields{
		"botName": bot.Self.UserName,
	},
	).Info("Successfully connected to bot!")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	for update := range updates {
		if update.CallbackQuery != nil {
			switch update.CallbackQuery.Data {
			case "confirmOrderCancellation":
				confirmOrderCancellation(update.CallbackQuery.Message)
			case "undoOrderCancellation":
				undoOrderCancellation(update.CallbackQuery.Message)
			case "doOrderCancellation":
				doOrderCancellation(update.CallbackQuery.Message)
			}
		} else if update.Message.Document.FileName == "assortment.xlsm" {
			log.Info("UPLOADING FILE")
			err := saveDimsFile(update.Message.Document.FileID, update.Message.Document.FileName)
			if err != nil {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
				bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–§–∞–π–ª —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
				bot.Send(msg)
			}
		} else if reflect.TypeOf(update.Message.Text).Kind() == reflect.String && update.Message.Text != "" {
			switch update.Message.Text {
			case "/start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–µ—Ä—É–ë–æ—Ç, –ø–æ–º–æ–≥–∞—é —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –ë–µ—Ä—É. " +
					"–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/subscribe'\n" +
					"–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/unsubscribe'\n" +
					"–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, –Ω–∞–±–µ—Ä–∏—Ç–µ '/order12345', –≥–¥–µ –≤–º–µ—Å—Ç–æ 12345 - –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞\n" +
					"–ß—Ç–æ–±—ã –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å '–ø–µ—Ä–µ–¥–∞–Ω —Å–ª—É–∂–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏', –Ω–∞–±–µ—Ä–∏—Ç–µ /shppd12345, –≥–¥–µ –≤–º–µ—Å—Ç–æ 12345 - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å")
				bot.Send(msg)
			case "/subscribe":
				isSubscribed, err := subscribeChatId(update.Message.Chat.ID)
				if err != nil {
					log.WithFields(log.Fields{
						"function" : "subscribeChat",
						"error"	:	err},
					).Warn("Failed to subscribe user!")
				} else {
					msgText := ""
					if isSubscribed {
						msgText = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
					} else {
						msgText = "–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö!"
					}
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
					msg.ReplyMarkup = menuKeyboard
					bot.Send(msg)
				}
			case "/unsubscribe":
				isSubscribed, err := unsubscribeChatId(update.Message.Chat.ID)
				if err != nil {
					log.WithFields(log.Fields{
						"function" : "unsubscribeChat",
						"error"	:	err},
					).Warn("Failed to unsubscribe user!")
				} else {
					msgText := ""
					if isSubscribed {
						msgText = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!"
					} else {
						msgText = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
					}
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
					msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
					bot.Send(msg)
				}
			case textShowOrders:
				msgText := getOpenOrders()
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
				msg.ParseMode = "markdown"
				bot.Send(msg)
			case textDownloadAct:
				downloadAct(update.Message.Chat.ID)
			case "/shipAllOrders":
				UpdateStatusToShippedAll()
			default:
				fmt.Printf("%#v", update.Message.Document)
				if strings.Contains(update.Message.Text, "/order") {
					msgText := getOrderInfo(getIdFromMsg(update.Message.Text))
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
					msg.ParseMode = "markdown"
					bot.Send(msg)
				} else if strings.Contains(update.Message.Text, "/label") {
					downloadLabels(getIdFromMsg(update.Message.Text), update.Message.Chat.ID)
				} else if strings.Contains(update.Message.Text, "/shppd") {
					setShippedStatus(getIdFromMsg(update.Message.Text), update.Message.Chat.ID)
				} else {
					msgText := "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
					msg.ParseMode = "markdown"
					bot.Send(msg)
				}
			}
		}
	}
}

// sendMessageToClients –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, ID –∫–æ—Ç–æ—Ä—ã—Ö
// —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î
func sendMessageToClients(msgText string) {
	var clientsID []int64
	err := db.Select(&clientsID, "SELECT * FROM bot_clients")
	if err != nil {
		log.WithFields(log.Fields{
			"function": "sendMessage",
			"error":    err},
		).Warn("Failed retrieve client list!")
	}
	for _, clientID := range clientsID {
		msg := tgbotapi.NewMessage(clientID, msgText)
		msg.ParseMode = "markdown"
		bot.Send(msg)
	}
}

// downloadAct —Å–∫–∞—á–∏–≤–∞–µ—Ç –∞–∫—Ç –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ
// –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å
func downloadAct(chatID int64) {
	actURL := fmt.Sprintf("https://api.partner.market.yandex.ru/v2/campaigns/%s/shipments/reception-transfer-act.json", cfg.Beru.CampaignID)
	resp := DoAuthRequest("GET", actURL, nil)
	if resp.StatusCode == 404 {
		msg := tgbotapi.NewMessage(chatID, "–ó–∞–∫–∞–∑—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —á–∏—Å–ª–æ–º *–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*")
		msg.ParseMode = "markdown"
		bot.Send(msg)
	} else {
		var file tgbotapi.FileBytes
		file.Bytes, _ = ioutil.ReadAll(resp.Body)
		file.Name = fmt.Sprintf("act%s.pdf", time.Now().Format("02-01-2006"))
		msg := tgbotapi.NewDocumentUpload(chatID, file)
		bot.Send(msg)
	}
}

// downloadLabels —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –Ω–∞–∫–ª–µ–π–∫–∞–º–∏-—è—Ä–ª—ã–∫–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ
// –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å
func downloadLabels(orderID string, chatID int64) {
	labelsURL := fmt.Sprintf("https://api.partner.market.yandex.ru/v2/campaigns/%s/orders/%s/delivery/labels.json", cfg.Beru.CampaignID, orderID)
	resp := DoAuthRequest("GET", labelsURL, nil)
	_, err := strconv.Atoi(orderID)
	if resp.StatusCode == 404 || err != nil{
		msg := tgbotapi.NewMessage(chatID, "–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID *–Ω–µ –Ω–∞–π–¥–µ–Ω*")
		msg.ParseMode = "markdown"
		bot.Send(msg)
	} else {
		var file tgbotapi.FileBytes
		file.Bytes, _ = ioutil.ReadAll(resp.Body)
		file.Name = fmt.Sprintf("labels%s.pdf", orderID)
		msg := tgbotapi.NewDocumentUpload(chatID, file)
		bot.Send(msg)
	}
}

// confirmOrderCancellation –º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π "–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑/–û—Å—Ç–∞–≤–∏—Ç—å"
func confirmOrderCancellation(msg *tgbotapi.Message) {
	confirm := tgbotapi.NewEditMessageReplyMarkup(msg.Chat.ID, msg.MessageID, confirmKeyboard)
	bot.Send(confirm)
}

// undoOrderCancellation –º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
func undoOrderCancellation(msg *tgbotapi.Message) {
	orderControl := tgbotapi.NewEditMessageReplyMarkup(msg.Chat.ID, msg.MessageID, orderControlKeyboard)
	bot.Send(orderControl)
}

// doOrderCancellation –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ë–µ—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
func doOrderCancellation(msg *tgbotapi.Message) {
	var statusMsgText string
	i := strings.Index(msg.Text, "/label")
	orderID := msg.Text[i+6:]
	resp := sendStatus("CANCELLED", "SHOP_FAILED", orderID)
	if resp.StatusCode != 200 {
		statusMsgText = fmt.Sprintf("–ë–µ—Ä—É –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π, –∑–∞–∫–∞–∑ %s *–Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω*!", orderID)
	} else {
		statusMsgText= fmt.Sprintf("–ó–∞–∫–∞–∑ %s —É—Å–ø–µ—à–Ω–æ *–æ—Ç–º–µ–Ω–µ–Ω*!", orderID)
	}
	statusMsg := tgbotapi.NewMessage(msg.Chat.ID, statusMsgText)
	orderControl := tgbotapi.NewEditMessageReplyMarkup(msg.Chat.ID, msg.MessageID, orderControlKeyboard)
	bot.Send(orderControl)
	statusMsg.ParseMode = "markdown"
	bot.Send(statusMsg)
}

// setShippedStatus –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ë–µ—Ä—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "SHIPPED"
func setShippedStatus(orderID string, chatID int64) {
	var statusMsgText string
	resp := sendStatus("PROCESSING", "SHIPPED", orderID)
	if resp.StatusCode != 200 {
		statusMsgText = fmt.Sprintf("–ë–µ—Ä—É –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π, —Å—Ç–∞—Ç—É—Å SHIPPED –∑–∞–∫–∞–∑–∞ %s *–Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*!", orderID)
	} else {
		statusMsgText= fmt.Sprintf("–°—Ç–∞—Ç—É—Å SHIPPED –∑–∞–∫–∞–∑–∞ %s —É—Å–ø–µ—à–Ω–æ *—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*!", orderID)
	}
	statusMsg := tgbotapi.NewMessage(chatID, statusMsgText)
	statusMsg.ParseMode = "markdown"
	bot.Send(statusMsg)
}